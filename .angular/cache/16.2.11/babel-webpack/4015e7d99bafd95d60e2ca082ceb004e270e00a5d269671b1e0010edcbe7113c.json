{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AppComponent = class AppComponent {\n  constructor(exerciseService) {\n    this.exerciseService = exerciseService;\n    this.selectedDay = ''; // Define a variable to hold the selected day\n    this.exerciseDetails = null;\n    this.exerciseToUpdate = {\n      id: '',\n      name: '',\n      weight: '',\n      repetitions: '',\n      machine: ''\n    };\n    this.getExercises();\n  }\n  // Function to close the modal\n  closeExamplePopup() {\n    const examplePopup = document.getElementById('examplePopup');\n    if (examplePopup) {\n      examplePopup.style.display = 'none';\n    }\n  }\n  openExamplePopup(day) {\n    this.selectedDay = day; // Set the selected day when the popup is opened\n    const examplePopup = document.getElementById('examplePopup');\n    if (examplePopup) {\n      examplePopup.style.display = 'block';\n    }\n  }\n  // Function triggered on square click\n  // Function to handle form submission (creating an exercise)\n  createExercise(event) {\n    event.preventDefault();\n    const exerciseData = {\n      name: document.getElementById('exerciseName').value,\n      repetitions: parseInt(document.getElementById('exerciseRepetitions').value, 10),\n      weight: parseFloat(document.getElementById('exerciseWeight').value),\n      machine: document.getElementById('exerciseMachine').value === 'true'\n    };\n    this.exerciseService.postExercise(exerciseData).subscribe(resp => {\n      console.log('Exercise created:', resp);\n      this.getExercises(); // Update the exercise list after a successful creation\n      this.closeExamplePopup(); // Close the modal after creating the exercise\n    }, err => {\n      console.error('Error creating exercise:', err);\n    });\n  }\n  // Function to retrieve all exercises\n  getExercises() {\n    this.exerciseService.getExercises().subscribe(resp => {\n      console.log('Exercises:', resp);\n      this.exerciseDetails = resp;\n    }, err => {\n      console.error('Error fetching exercises:', err);\n    });\n  }\n  // Function to delete an exercise\n  deleteExercise(exercise) {\n    this.exerciseService.deleteExercise(exercise.id).subscribe(() => {\n      console.log('Exercise deleted');\n      this.getExercises(); // Refresh the exercise list after deletion\n    }, err => {\n      console.error('Error deleting exercise:', err);\n    });\n  }\n  edit(exercise) {\n    this.exerciseToUpdate = exercise;\n  }\n  updateExercise() {\n    this.exerciseService.updateExercise(this.exerciseToUpdate.id, this.exerciseToUpdate).subscribe(resp => {\n      console.log('Exercise updated:', resp);\n    }, err => {\n      console.error('Error updating exercise:', err);\n    });\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","AppComponent","constructor","exerciseService","selectedDay","exerciseDetails","exerciseToUpdate","id","name","weight","repetitions","machine","getExercises","closeExamplePopup","examplePopup","document","getElementById","style","display","openExamplePopup","day","createExercise","event","preventDefault","exerciseData","value","parseInt","parseFloat","postExercise","subscribe","resp","console","log","err","error","deleteExercise","exercise","edit","updateExercise","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/rafa/Sites/Proyectos/gym-planning/src/app/app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ExerciseService } from './exercise.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n    selectedDay: string = ''; // Define a variable to hold the selected day\n\n  exerciseDetails: any = null;\n  exerciseToUpdate = {\n    id: '',\n    name: '',\n    weight: '',\n    repetitions: '',\n    machine: ''\n  };\n\n  constructor(private exerciseService: ExerciseService) {\n    this.getExercises();\n  }\n\n  // Function to close the modal\n  closeExamplePopup(): void {\n    const examplePopup = document.getElementById('examplePopup');\n    if (examplePopup) {\n      examplePopup.style.display = 'none';\n    }\n  }\n\n  openExamplePopup(day: string): void {\n    this.selectedDay = day; // Set the selected day when the popup is opened\n    const examplePopup = document.getElementById('examplePopup');\n    if (examplePopup) {\n        examplePopup.style.display = 'block';\n    }\n}\n\n  // Function triggered on square click\n\n\n  // Function to handle form submission (creating an exercise)\n  createExercise(event: Event): void {\n    event.preventDefault();\n\n    const exerciseData = {\n      name: (document.getElementById('exerciseName') as HTMLInputElement).value,\n      repetitions: parseInt((document.getElementById('exerciseRepetitions') as HTMLInputElement).value, 10),\n      weight: parseFloat((document.getElementById('exerciseWeight') as HTMLInputElement).value),\n      machine: (document.getElementById('exerciseMachine') as HTMLSelectElement).value === 'true'\n    };\n\n    this.exerciseService.postExercise(exerciseData).subscribe(\n      (resp) => {\n        console.log('Exercise created:', resp);\n        this.getExercises(); // Update the exercise list after a successful creation\n        this.closeExamplePopup(); // Close the modal after creating the exercise\n      },\n      (err) => {\n        console.error('Error creating exercise:', err);\n      }\n    );\n  }\n\n  // Function to retrieve all exercises\n  getExercises(): void {\n    this.exerciseService.getExercises().subscribe(\n      (resp) => {\n        console.log('Exercises:', resp);\n        this.exerciseDetails = resp;\n      },\n      (err) => {\n        console.error('Error fetching exercises:', err);\n      }\n    );\n  }\n\n  // Function to delete an exercise\n  deleteExercise(exercise: any): void {\n    this.exerciseService.deleteExercise(exercise.id).subscribe(\n      () => {\n        console.log('Exercise deleted');\n        this.getExercises(); // Refresh the exercise list after deletion\n      },\n      (err) => {\n        console.error('Error deleting exercise:', err);\n      }\n    );\n  }\n\n  edit(exercise: any): void {\n    this.exerciseToUpdate = exercise;\n  }\n\n  updateExercise(): void {\n    this.exerciseService.updateExercise(this.exerciseToUpdate.id, this.exerciseToUpdate).subscribe(\n      (resp) => {\n        console.log('Exercise updated:', resp);\n      },\n      (err) => {\n        console.error('Error updating exercise:', err);\n      }\n    );\n  }\n\n\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}