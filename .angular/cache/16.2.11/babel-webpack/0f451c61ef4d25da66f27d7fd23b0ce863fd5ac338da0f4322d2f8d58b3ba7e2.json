{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AppComponent = class AppComponent {\n  constructor(exerciseService) {\n    this.exerciseService = exerciseService;\n    this.exerciseDetails = null;\n    this.exerciseToUpdate = {\n      id: '',\n      name: '',\n      weight: '',\n      repetitions: '',\n      machine: ''\n    };\n    this.getExercises();\n  }\n  // Function to close the modal\n  closeExamplePopup() {\n    const examplePopup = document.getElementById('examplePopup');\n    if (examplePopup) {\n      examplePopup.style.display = 'none';\n    }\n  }\n  // Function to open the modal\n  openExamplePopup(day) {\n    const examplePopup = document.getElementById('examplePopup');\n    if (examplePopup) {\n      examplePopup.style.display = 'block';\n    }\n  }\n  createExercise(day) {\n    console.log('event:', event);\n    const exerciseData = {\n      name: document.getElementById('exerciseName').value,\n      repetitions: parseInt(document.getElementById('exerciseRepetitions').value, 10),\n      weight: parseFloat(document.getElementById('exerciseWeight').value),\n      machine: document.getElementById('exerciseMachine').value === 'true',\n      day: day // Use the 'day' parameter received here\n    };\n\n    this.exerciseService.postExercise(exerciseData).subscribe(resp => {\n      console.log('Exercise created:', resp);\n      this.getExercises(); // Update the exercise list after a successful creation\n      this.closeExamplePopup(); // Close the modal after creating the exercise\n    }, err => {\n      console.error('Error creating exercise:', err);\n    });\n  }\n  // Function to retrieve all exercises\n  getExercises() {\n    this.exerciseService.getExercises().subscribe(resp => {\n      console.log('Exercises:', resp);\n      this.exerciseDetails = resp;\n    }, err => {\n      console.error('Error fetching exercises:', err);\n    });\n  }\n  // Function to delete an exercise\n  deleteExercise(exercise) {\n    this.exerciseService.deleteExercise(exercise.id).subscribe(() => {\n      console.log('Exercise deleted');\n      this.getExercises(); // Refresh the exercise list after deletion\n    }, err => {\n      console.error('Error deleting exercise:', err);\n    });\n  }\n  edit(exercise) {\n    this.exerciseToUpdate = exercise;\n  }\n  updateExercise() {\n    this.exerciseService.updateExercise(this.exerciseToUpdate.id, this.exerciseToUpdate).subscribe(resp => {\n      console.log('Exercise updated:', resp);\n    }, err => {\n      console.error('Error updating exercise:', err);\n    });\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","AppComponent","constructor","exerciseService","exerciseDetails","exerciseToUpdate","id","name","weight","repetitions","machine","getExercises","closeExamplePopup","examplePopup","document","getElementById","style","display","openExamplePopup","day","createExercise","console","log","event","exerciseData","value","parseInt","parseFloat","postExercise","subscribe","resp","err","error","deleteExercise","exercise","edit","updateExercise","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/rafa/Sites/Proyectos/gym-planning/src/app/app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ExerciseService } from './exercise.service';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    exerciseDetails: any = null;\n    exerciseToUpdate = {\n        id: '',\n        name: '',\n        weight: '',\n        repetitions: '',\n        machine: ''\n    };\n\n    constructor(private exerciseService: ExerciseService) {\n        this.getExercises();\n    }\n\n    // Function to close the modal\n    closeExamplePopup(): void {\n        const examplePopup = document.getElementById('examplePopup');\n        if (examplePopup) {\n            examplePopup.style.display = 'none';\n        }\n    }\n\n    // Function to open the modal\n    openExamplePopup(day: string): void {\n        const examplePopup = document.getElementById('examplePopup');\n        if (examplePopup) {\n            examplePopup.style.display = 'block';\n        }\n    }\n\n    createExercise(day: string): void {\n        console.log('event:', event);\n        const exerciseData = {\n            name: (document.getElementById('exerciseName') as HTMLInputElement).value,\n            repetitions: parseInt((document.getElementById('exerciseRepetitions') as HTMLInputElement).value, 10),\n            weight: parseFloat((document.getElementById('exerciseWeight') as HTMLInputElement).value),\n            machine: (document.getElementById('exerciseMachine') as HTMLSelectElement).value === 'true',\n            day: day // Use the 'day' parameter received here\n        };\n\n        this.exerciseService.postExercise(exerciseData).subscribe(\n            (resp) => {\n                console.log('Exercise created:', resp);\n                this.getExercises(); // Update the exercise list after a successful creation\n                this.closeExamplePopup(); // Close the modal after creating the exercise\n            },\n            (err) => {\n                console.error('Error creating exercise:', err);\n            }\n        );\n    }\n\n    // Function to retrieve all exercises\n    getExercises(): void {\n        this.exerciseService.getExercises().subscribe(\n            (resp) => {\n                console.log('Exercises:', resp);\n                this.exerciseDetails = resp;\n            },\n            (err) => {\n                console.error('Error fetching exercises:', err);\n            }\n        );\n    }\n\n    // Function to delete an exercise\n    deleteExercise(exercise: any): void {\n        this.exerciseService.deleteExercise(exercise.id).subscribe(\n            () => {\n                console.log('Exercise deleted');\n                this.getExercises(); // Refresh the exercise list after deletion\n            },\n            (err) => {\n                console.error('Error deleting exercise:', err);\n            }\n        );\n    }\n\n    edit(exercise: any): void {\n        this.exerciseToUpdate = exercise;\n    }\n\n    updateExercise(): void {\n        this.exerciseService.updateExercise(this.exerciseToUpdate.id, this.exerciseToUpdate).subscribe(\n            (resp) => {\n                console.log('Exercise updated:', resp);\n            },\n            (err) => {\n                console.error('Error updating exercise:', err);\n            }\n        );\n    }\n\n\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}